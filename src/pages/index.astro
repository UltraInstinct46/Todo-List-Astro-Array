---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
export const tags = ["astro", "successes", "community", "setbacks", "learning in public"];

---
<Layout title="Welcome to Astro.">
	<main>
		<h1 class="text-lg">Todo List</h1>
			<form>
				<label class="block">
				  <span class="block text-sm font-medium text-slate-700">Title</span>
				  <input id="title" class="border-slate-200 w-full placeholder-slate-400 contrast-more:border-slate-400 contrast-more:placeholder-slate-500"/>
				</label>
				<label class="block">
					<span class="block text-sm font-medium text-slate-700">Text</span>
					<textarea id="text" class=" mb-5 w-full border-slate-200 placeholder-slate-400 contrast-more:border-slate-400 contrast-more:placeholder-slate-500"/>
				  </label>
				  <button class="mb-10 w-full bg-blue-400" id="save" type="button">Save</button>
			  </form>
		<ul role="list" class="link-card-grid" id="card">
			{tags.map((tag) => <Card href={tag} title={tag} body={tag}></Card>)}
		</ul>
	</main>
</Layout>
<script>
	import { tags } from './index.astro';
    const titleData = [];
	const textData = [];
	const save = document.getElementById("save");
	save.addEventListener('click', () => {
	  const titleInput = document.getElementById('title') as HTMLInputElement;
	  const textInput = document.getElementById('text') as HTMLTextAreaElement;
	  const title = titleInput.value.trim();
	  const text = textInput.value.trim();
	  var card = document.getElementById("card");
	  var content = card.innerHTML;
	  if (title !== '' || text !== '') {
		titleData.push(title); 
		textData.push(text);
		textInput.value = "";
		titleInput.value = ""; 
		card.innerHTML = content;
		refreshList();
	  }
	});
	function refreshList() {
    const ul = document.getElementById("card");
    ul.innerHTML = ''; // Clear the existing list items
  
    titleData.map((title, index) => {
      const li = document.createElement("li");
      li.innerHTML = `<li class="link-card" style="list-style: none; display: flex; padding: 0.25rem; background-color: white; background-image: none; background-size: 400%; border-radius: 0.6rem; background-position: 100%; transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1); box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1));">
          <a href={href} style="width: 100%; text-decoration: none; line-height: 1.4; padding: 1rem 1.3rem; border-radius: 0.35rem; color: #111; background-color: white; opacity: 0.8;">
            <h2 style="margin: 0; font-size: 1.25rem; transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);">
              ${title}
              <span>&rarr;</span>
            </h2>
            <p style="margin-top: 0.5rem; margin-bottom: 0; color: #444;">
              ${textData[index]}
            </p>
          </a>
        </li>`;
      ul.appendChild(li);
    });
  }
  </script>
  
<style>
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 60ch;
	}
	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
	.link-card {
		list-style: none;
		display: flex;
		padding: 0.25rem;
		background-color: white;
		background-image: none;
		background-size: 400%;
		border-radius: 0.6rem;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
	}

	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: 1rem 1.3rem;
		border-radius: 0.35rem;
		color: #111;
		background-color: white;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: #444;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent));
	}
</style>
